*1.ROUND ROBIN PROBLEM:
#include <stdio.h>
#include <conio.h>

int main() {
    int n, i,qt,  count = 0, temp, sq = 0, bt[10], wt[10], tat[10], rem_bt[10];
    float awt = 0, atat = 0;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    printf("Enter burst time of processes: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
        rem_bt[i] = bt[i];
    }
    
    printf("Enter quantum time: ");
    scanf("%d", &qt);
    
    while (1) {
        count = 0; 
        for (i = 0; i < n; i++) {
            temp = qt;
            if (rem_bt[i] == 0) {
                count++;
                continue;  
            }
            if (rem_bt[i] > qt) {
                rem_bt[i] -= qt;
            } else {
                temp = rem_bt[i]; 
                rem_bt[i] = 0;
            }
            sq += temp;
            tat[i] = sq; 
        }
        if (count == n) 
            break;
    }
    
    printf("\nProcess\tBurst Time\tTurnaround Time\tWaiting Time\n");
    for (i = 0; i < n; i++) {
        wt[i] = tat[i] - bt[i];
        awt += wt[i];
        atat += tat[i];
        printf("\n%d\t%d\t\t%d\t\t%d", i + 1, bt[i], tat[i], wt[i]);
    }
    
    awt /= n; 
    atat /= n; 
    printf("\nAverage Waiting Time = %f\n", awt);
    printf("Average Turnaround Time = %f\n", atat);
    return 0;
}
1.ROUND ROBIN PROBLEM:
#include <stdio.h>
#include <conio.h>

int main() {
    int n, i,qt,  count = 0, temp, sq = 0, bt[10], wt[10], tat[10], rem_bt[10];
    float awt = 0, atat = 0;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    printf("Enter burst time of processes: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &bt[i]);
        rem_bt[i] = bt[i];
    }
    
    printf("Enter quantum time: ");
    scanf("%d", &qt);
    
    while (1) {
        count = 0; 
        for (i = 0; i < n; i++) {
            temp = qt;
            if (rem_bt[i] == 0) {
                count++;
                continue;  
            }
            if (rem_bt[i] > qt) {
                rem_bt[i] -= qt;
            } else {
                temp = rem_bt[i]; 
                rem_bt[i] = 0;
            }
            sq += temp;
            tat[i] = sq; 
        }
        if (count == n) 
            break;
    }
    
    printf("\nProcess\tBurst Time\tTurnaround Time\tWaiting Time\n");
    for (i = 0; i < n; i++) {
        wt[i] = tat[i] - bt[i];
        awt += wt[i];
        atat += tat[i];
        printf("\n%d\t%d\t\t%d\t\t%d", i + 1, bt[i], tat[i], wt[i]);
    }
    
    awt /= n; 
    atat /= n; 
    printf("\nAverage Waiting Time = %f\n", awt);
    printf("Average Turnaround Time = %f\n", atat);
    return 0;
}
*
