BANKERS-ALGORITHM PROBLEM:
#include<stdio.h>
#include<conio.h>
int main()
{
int m,n;
int available[m];
int max[n][m];
int allocation[n][m];
int need[n][m];
int work[m];
bool finish[n];
printf("enter the size of m");
scanf("%d",&m);
printf("enter the value of n");
scanf("%d",&n);

printf("Enter available resources:\n");
for (int i = 0; i < m; i++) {
    scanf("%d", &available[i]);
}


printf("Enter max matrix:\n");
for (int i = 0; i < n; i++) {
for (int j = 0; j < m; j++) {
scanf("%d", &max[i][j]);
}
}


printf("Enter allocation matrix:\n");
for (int i = 0; i < n; i++) {
    for (int j = 0; j < m; j++) {
        scanf("%d", &allocation[i][j]);
        need[i][j] = max[i][j] - allocation[i][j];
    }
}


for (int i = 0; i < m; i++) {
    work[i] = available[i];
}
for (int i = 0; i < n; i++) {
    finish[i] = false;
}


int count = 0;
int safe_seq[n];
while (count < n) {
int found = -1;
for (int i = 0; i < n; i++) {
if (!finish[i]) {
int can_allocate = 1;
for (int j = 0; j < m; j++) {
if (need[i][j] > work[j]) {
can_allocate = 0;
break;
}
}
if (can_allocate) {
found = i;
break;
}
}
}
if (found == -1) {
printf("System is in unsafe state!\n");
return 0;
}
for (int j = 0; j < m; j++) {
work[j] += allocation[found][j];
}
finish[found] = true;
safe_seq[count] = found;
count++;
}

printf("System is in safe state.\nSafe sequence: ");
for (int i = 0; i < n; i++) {
    printf("P%d ", safe_seq[i]);
}
printf("\n");
return 0;
}
