#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define MAX_THREADS 10
typedef struct {
    int number; 
    int result; 
} ThreadData;
void* computeSquare(void* arg) {
    ThreadData* data = (ThreadData*)arg;
    data->result = data->number * data->number; 
    printf("Thread ID: %lu, Number: %d, Square: %d\n", pthread_self(), data->number, data->result);
    pthread_exit(NULL);
}

int main() {
    int num_threads;
    pthread_t threads[MAX_THREADS];
    ThreadData thread_data[MAX_THREADS];
    printf("Enter the number of threads (1-%d): ", MAX_THREADS);
    scanf("%d", &num_threads);

    if (num_threads < 1 || num_threads > MAX_THREADS) {
        printf("Invalid number of threads. Exiting.\n");
        return 1;
    }

    for (int i = 0; i < num_threads; i++) {
        printf("Enter a number for thread %d: ", i + 1);
        scanf("%d", &thread_data[i].number);
    }
    for (int i = 0; i < num_threads; i++) {
        if (pthread_create(&threads[i], NULL, computeSquare, &thread_data[i]) != 0) {
            perror("Failed to create thread");
            return 1;
        }
    }
    for (int i = 0; i < num_threads; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            perror("Failed to join thread");
            return 1;
        }
    }
    printf("\nResults from all threads:\n");
    for (int i = 0; i < num_threads; i++) {
        printf("Thread %d: Number = %d, Square = %d\n", i + 1, thread_data[i].number, thread_data[i].result);
    }

    printf("Main thread exiting.\n");
    return 0;
}
